{"version":3,"sources":["Blooper.js","util.js","serviceWorker.js","index.js"],"names":["Blooper","containerWidth","containerHeight","speed","useState","loaded","setLoaded","width","height","setDims","maxX","maxY","x","setX","y","setY","hue","setHue","rot","setRot","useEffect","localX","Math","random","localY","vx","vy","vRot","localHue","localRot","interval","setInterval","min","max","clearInterval","className","style","left","top","opacity","filter","transform","src","alt","onLoad","e","target","clientWidth","clientHeight","Loading","text","childVariants","wave","scale","transition","ease","duration","repeat","Infinity","repeatDelay","div","key","variants","staggerChildren","animate","split","map","letter","i","span","position","Wrapper","ref","useRef","updateDimensions","useCallback","current","getBoundingClientRect","useLayoutEffect","window","addEventListener","removeEventListener","list","setSpeed","loadingText","setLoadingText","fn","prompt","handlers","handler","tagName","toLowerCase","isComposing","keyCode","code","preventDefault","stopPropagation","document","forEach","background","yoyo","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.331621b6.chunk.js","sourcesContent":["import React, { useState, useRef, useLayoutEffect, useCallback, useEffect } from 'react';\nimport { useShortcuts } from './util';\nimport { motion } from 'framer-motion';\n\nfunction Blooper({ containerWidth, containerHeight, speed }) {\n\n  const [ loaded, setLoaded ] = useState(false);\n\n  const [ { width, height }, setDims ] = useState({ width: 0, height: 0 });\n\n  const maxX = containerWidth - width;\n  const maxY = containerHeight - height;\n\n  const [ x, setX ] = useState(0);\n  const [ y, setY ] = useState(0);\n\n  const [ hue, setHue ] = useState(0);\n  const [ rot, setRot ] = useState(0);\n\n  useEffect(() => {\n    let [ localX, localY ] = [ Math.random() * maxX, Math.random() * maxY ];\n    let [ vx, vy, vRot ] = [ (Math.random() > 0.5) ? speed : -speed, (Math.random() > 0.5) ? speed : -speed, -0.2 + 0.4 * Math.random() ];\n    let localHue = 0;\n    let localRot = 0;\n    setX(localX);\n    setY(localY);\n    setHue(localHue);\n    setRot(localRot);\n    const update = () => {\n      localX += vx;\n      if (localX < 0 || localX > maxX) {\n        localX = Math.min(Math.max(localX, 0), maxX);\n        vx = -vx\n        localHue += 27;\n        vRot = -0.2 + 0.4 * Math.random();\n      }\n      localY += vy;\n      if (localY < 0 || localY > maxY) {\n        localY = Math.min(Math.max(localY, 0), maxY);\n        vy = -vy;\n        localHue += 27;\n        vRot = -0.2 + 0.4 * Math.random();\n      }\n      localRot += vRot;\n      setX(localX);\n      setY(localY);\n      setHue(localHue);\n      setRot(localRot);\n    }\n    const interval = setInterval(update, 10);\n    return () => clearInterval(interval);\n  }, [ setX, setY, setHue, setRot, containerWidth, containerHeight, speed, maxX, maxY ]);\n\n  return (\n    <div className=\"blooper\" style={{left: x, top: y, opacity: (loaded) ? 1 : 0, filter: `hue-rotate(${hue}deg)`, transform: `rotate(${rot}deg)` }}>\n      <img\n        src=\"/bloop/static/img/bloop.png\"\n        alt=\"Blooper\"\n        onLoad={(e) => { const { clientWidth, clientHeight } = e.target; setDims({width: clientWidth, height: clientHeight}); setLoaded(true); }}\n      />\n    </div>\n  );\n}\n\nfunction Loading({ text }) {\n  const parentVariants = {\n    wave: {transition: {staggerChildren: 0.1}}\n  };\n  const childVariants = {\n    wave: {scale: [1, 1.2, 1], transition: { ease: 'easeInOut', duration: 0.5, repeat: Infinity, repeatDelay: 1.5 }}\n  };\n  return (\n    <motion.div key={text} variants={parentVariants} className=\"loading\" animate=\"wave\">\n      {text.split('').map((letter, i) => {\n        if (letter === ' ') letter = '\\xa0';\n        return (\n          <motion.span key={i} variants={childVariants} style={{position: 'relative'}}>{letter}</motion.span>\n        );\n      })}\n    </motion.div>\n  );\n}\n\nexport default function Wrapper() {\n  const [ { width, height }, setDims ] = useState({ width: 0, height: 0 });\n  const ref = useRef(null);\n  const updateDimensions = useCallback(() => {\n    if (ref.current !== null) {\n      const { width, height } = ref.current.getBoundingClientRect();\n      setDims({ width, height });\n    }\n  }, [ref, setDims]);\n  useLayoutEffect(updateDimensions, [updateDimensions]);\n  useEffect(() => {\n    window.addEventListener('resize', updateDimensions);\n    return () => window.removeEventListener('resize', updateDimensions);\n  }, [updateDimensions]);\n\n  const [ speed, setSpeed ] = useState(3);\n  const [ loadingText, setLoadingText ] = useState('LOADING...');\n\n  useShortcuts([\n    {key: 'ArrowUp', fn: () => setSpeed(speed + 0.5)},\n    {key: 'ArrowDown', fn: () => setSpeed(speed - 0.5)},\n    {key: 'Space', fn: () => setLoadingText(window.prompt('Enter new text'))},\n  ])\n\n  return (\n    <motion.div\n      className=\"wrapper\"\n      ref={ref}\n      animate={{background: ['linear-gradient(0deg, rgba(44,52,156,1) 0%, rgba(48,188,255,1) 100%)', 'linear-gradient(0deg, rgba(75,105,200,1) 0%, rgba(109,222,251,1) 100%)']}}\n      transition={{ease: 'linear', duration: 5, yoyo: Infinity}}\n    >\n      <Loading text={loadingText} />\n      <Blooper containerWidth={width} containerHeight={height} speed={speed} />\n    </motion.div>\n  );\n}\n","import { useEffect } from 'react';\r\n\r\nexport function useShortcuts(list) {\r\n  useEffect(() => {\r\n    const handlers = list.map(({ key, fn }) => {\r\n      function handler(e) {\r\n        switch (e.target.tagName.toLowerCase()) {\r\n          case 'input':\r\n          case 'textarea':\r\n            return;\r\n          default:\r\n            if (e.isComposing || e.keyCode === 229) return;\r\n            if (e.code === key) {\r\n              e.preventDefault();\r\n              e.stopPropagation();\r\n              fn();\r\n            }\r\n        }\r\n      }\r\n      document.addEventListener('keydown', handler);\r\n      return handler;\r\n    });\r\n\r\n    function cleanUp() {\r\n      handlers.forEach((handler) => {\r\n        document.removeEventListener('keydown', handler);\r\n      });\r\n    }\r\n\r\n    return cleanUp;\r\n  }, [list]);\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Wrapper from './Blooper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Wrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}